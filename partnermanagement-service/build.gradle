plugins {
    id 'java'
    id 'eclipse'
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id "org.openapi.generator" version "4.3.0"
    id 'com.bmuschko.docker-remote-api' version '6.4.0'
    id "com.gorylenko.gradle-git-properties" version "2.2.2"
    id "com.dorongold.task-tree" version "1.5"
    id "maven-publish"
    id "org.sonarqube" version "2.7"
    id 'jacoco'
}

dependencyManagement {
    imports {
        mavenBom "org.keycloak.bom:keycloak-adapter-bom:9.0.3"
    }
}

defaultTasks 'clean', 'build'

// Import task types
import com.bmuschko.gradle.docker.tasks.image.*

group = 'com.subex.ngp'
bootJar {
    baseName = 'partnermanagement-service'
    version =  '0.1.0'
    mainClassName = 'com.subex.partnermanagement.OpenAPI2SpringBoot'
    classifier = 'boot'
}

// tag::configurations[]
configurations {
	jaxb
}
// end::configurations[]


repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url = 'http://10.113.56.67:8888/artifactory/libs-snapshot-local/'
        credentials {
			username "push.user"
			password "pushuser123"
		}
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

task genJaxb {
	ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
	ext.classesDir = "${buildDir}/classes/jaxb"
	ext.schema = "$projectDir/../partnermanagement-service/src/main/resources/wsdl/consume.wsdl"

	outputs.dir classesDir

	doLast() {
		project.ant {
			taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
					classpath: configurations.jaxb.asPath
			mkdir(dir: sourcesDir)
			mkdir(dir: classesDir)

				xjc(destdir: sourcesDir, schema: schema,
						package: "com.subex.wsdl") {
						arg(value: "-wsdl")
					produces(dir: sourcesDir, includes: "**/*.java")
				}

				javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
						debugLevel: "lines,vars,source",
						classpath: configurations.jaxb.asPath) {
					src(path: sourcesDir)
					include(name: "**/*.java")
					include(name: "*.java")
					}

				copy(todir: classesDir) {
						fileset(dir: sourcesDir, erroronmissingdir: false) {
						exclude(name: "**/*.java")
				}
			}
		}
	}
}
// end::wsdl[]

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-test'
    compile("org.springframework.boot:spring-boot-devtools")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile('org.springframework.boot:spring-boot-starter-oauth2-client')
    //compile ("com.oracle.ojdbc:ojdbc8:19.3.0.0")
    //compile("com.h2database:h2")
    compile('org.keycloak:keycloak-spring-boot-starter:9.0.3')

    compile 'io.springfox:springfox-swagger2:2.8.0'
    compile 'io.springfox:springfox-swagger-ui:2.8.0'
    compile 'javax.xml.bind:jaxb-api:2.2.11'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.5'
    compile 'org.openapitools:jackson-databind-nullable:0.1.0'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    // added below 2 for securtiy and io.json web token
	//compile group: 'org.springframework.security', name: 'spring-security-core', version: '5.4.2'
	compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
	compile group: 'com.auth0', name: 'java-jwt', version: '3.10.3'
	
    compile 'javax.validation:validation-api:2.0.1.Final'
    compile group: 'org.postgresql', name: 'postgresql', version:'42.2.5'
    compile group: 'net.sf.dozer', name: 'dozer', version: '5.5.1'
    compile group: 'com.oracle.database.jdbc', name: 'ojdbc8', version: '19.3.0.0'
    compile group: 'tech.allegro.schema.json2avro', name: 'converter', version: '0.2.2'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile group: 'org.apache.avro', name: 'avro', version: '1.7.7'
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile 'org.springframework.boot:spring-boot-starter-mail'
    compile group: 'javax.ws.rs', name: 'jsr311-api', version: '1.1.1'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.10'
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.10'
    compile "org.flywaydb:flyway-core:6.0.8"
    compile "com.h2database:h2:1.4.199"
    compile group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4'
	compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'	
	compile group: 'org.sonarsource.java', name: 'java-surefire', version: '5.14.0.18788'
    compile group: 'com.subex.ngp.common-services-client-api', name: 'common-services-client-api', version: '1.0.0-SNAPSHOT'
    compile group: 'com.subex.ngp.audit-trail-lib', name: 'ngp-audit-trail-lib', version: '1.4.2-SNAPSHOT'
    testCompile group: 'org.awaitility', name: 'awaitility', version: '4.0.2'
    testCompile("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'junit', module: 'junit'
    }
    testCompile("org.junit.jupiter:junit-jupiter-api:5.6.1")
    testCompile("org.junit.jupiter:junit-jupiter-params:5.6.1")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.6.1")
    testRuntime("org.junit.platform:junit-platform-launcher")
    testCompile "org.mockito:mockito-core:2.23.0"
    testCompile('org.mockito:mockito-junit-jupiter:2.23.0')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.keycloak:keycloak-test-helper:9.0.3')
    testCompile 'org.testcontainers:testcontainers:1.12.0' 
    testCompile("org.junit.jupiter:junit-jupiter:5.5.2")
    compile group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.0'
	compile group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.0'     
    testCompile 'org.testcontainers:postgresql:1.12.0'
    testCompile group: 'com.h2database', name: 'h2', version: '1.3.148'
    //Added for SOAP consume
    compile group: 'javax.xml.ws', name: 'jaxws-api', version: '2.3.1'
    implementation 'com.sun.xml.messaging.saaj:saaj-impl:1.5.1'
	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.2'
	implementation 'org.springframework.ws:spring-ws-core'
	implementation 'org.glassfish.jaxb:jaxb-runtime'
	compile(files(genJaxb.classesDir).builtBy(genJaxb))
	jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"
}

task api(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "spring"
    templateDir = "$projectDir/openapi-spring-template"
    inputSpec = "$projectDir/../partnermanagement-api/partnermanagement.json"
    outputDir = "$projectDir/openapi-generator"
    apiPackage = "com.subex.partnermanagement.api"
    invokerPackage = "com.subex.partnermanagement"
    modelPackage = "com.subex.partnermanagement.model"
    generateApiTests = true
    ignoreFileOverride = "$projectDir/.openapi-generator-ignore"
    configOptions = [
        delegatePattern: "true",
        hideGenerationTimestamp: "true",
        dateLibrary: "java8"
    ]
    inputs.file(inputSpec)
    inputs.dir(templateDir)
    outputs.dir(outputDir)
}

task commonsApi(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "java"
    inputSpec = "$projectDir/../partnermanagement-api/common-services.json"
    outputDir = "$projectDir/common-services-client"
    apiPackage = "com.subex.ngp.commonservices.api"
    modelPackage = "com.subex.ngp.commonservices.model"
    configOptions = [
        library: 'webclient',
        hideGenerationTimestamp: "true",
        dateLibrary: "java8"
    ]
    inputs.file(inputSpec)
    outputs.dir(outputDir)
}

sourceSets {
    main {
        java {
            srcDirs "src/main/java"
            srcDirs "openapi-generator/src/main/java"
            srcDirs "common-services-client/src/main/java"
        }
    }
    test {
    	java {
    		srcDirs "src/test/java"
	        if (System.properties['test.profile'] != 'integration') {
	        	 exclude '**/integration*'
	  		}
	  	}
  	}
}

eclipse {
    classpath {
        file {
            whenMerged {
                entries.each {
                    source ->
                        if (source.kind == 'src' && source.path.startsWith('openapi-generator')) {
                            source.entryAttributes['ignore_optional_problems'] = 'true'
                        }
                        if (source.kind == 'src' && source.path.startsWith('common-services-client')) {
                            source.entryAttributes['ignore_optional_problems'] = 'true'
                        }
                }
            }
        }
    }
}

openApiValidate {
    inputSpec = "$projectDir/../partnermanagement-api/partnermanagement.json"
}

test {
    useJUnitPlatform()
    ignoreFailures = true
     jacoco {
        //append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        
    }
    doFirst {
        exec {
            commandLine "./scripts/partnermanagement", "start", "--only-keycloak"
        }
    }
}
sonarqube {
    properties {
      property "sonar.java.coveragePlugin", "jacoco"										 
      property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
    }
}
jacoco {
    toolVersion ="0.8.2"
    reportsDir = file("$buildDir/reports/jacoco")
}
jacocoTestReport {
    reports {
		xml.enabled=true
        csv.enabled=true
        html.enabled=true
    }
}

task buildMyAppImage(type: DockerBuildImage) {
    inputDir = file('.')
    images.add('ngp-master/partnermanagement-service:latest')
}

publishing {
	publications {
		bootJava(MavenPublication) {
            artifact bootJar
		}
	}
	repositories {
        maven {
            if (project.version.endsWith("-SNAPSHOT")) {
                url = 'http://10.113.56.67:8888/artifactory/libs-snapshot-local/'
            } else {
                url = 'http://10.113.56.67:8888/artifactory/libs-release-local/'
            }
            credentials {
                username "push.user"
                password "pushuser123"
            }
        }
    }
}


test.finalizedBy jacocoTestReport
compileJava.dependsOn tasks.api
compileJava.dependsOn tasks.commonsApi
buildMyAppImage.dependsOn build
